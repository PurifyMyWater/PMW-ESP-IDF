name: CI/CD

on:
    schedule:
        -   cron: '0 2 1 * *'
    workflow_dispatch:
    release:
        types: [ published ]
    push:
        paths:
            - Dockerfile

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }} # may contain uppercase (e.g., PurifyMyWater/PMW-ESP-IDF)

jobs:
    ci-build:
        if: ${{ github.event_name == 'push' }}
        runs-on: ubuntu-latest
        permissions:
            contents: read
        steps:
            -   name: Checkout repository
                uses: actions/checkout@v4

            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v3

            -   name: Normalize image name to lowercase
                run: echo "IMAGE_NAME_LC=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"

            -   name: Build Docker image (no push) for current commit
                uses: docker/build-push-action@v6
                with:
                    context: .
                    file: ./Dockerfile
                    push: false
                    load: false
                    pull: true
                    tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}:ci-${{ github.sha }}
                    cache-from: type=gha
                    cache-to: type=gha,mode=max

    success:
        needs: ci-build
        if: ${{ github.event_name == 'push' && always() }}
        runs-on: ubuntu-latest
        permissions:
            contents: read
        steps:
            -   name: Report CI build outcome
                run: |
                    echo "ci-build result: ${{ needs.ci-build.result }}"
                    if [ "${{ needs.ci-build.result }}" = "success" ]; then
                      echo "Dockerfile CI build for commit $GITHUB_SHA succeeded."
                      exit 0
                    else
                      echo "Dockerfile CI build did not succeed (result=${{ needs.ci-build.result }})."
                      exit 1
                    fi

    list-tags:
        if: ${{ github.event_name != 'push' }}
        runs-on: ubuntu-latest
        outputs:
            tags: ${{ steps.get-tags.outputs.tags }}
        steps:
            -   name: Checkout repository
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0

            -   name: Get tags for this run (all tags on schedule/manual, release tag on release)
                id: get-tags
                env:
                    EVENT_NAME: ${{ github.event_name }}
                    RELEASE_TAG: ${{ github.event.release.tag_name }}
                run: |
                    if [ "$EVENT_NAME" = "release" ] && [ -n "$RELEASE_TAG" ]; then
                      echo "Detected release event for tag: $RELEASE_TAG"
                      echo "tags=[\"$RELEASE_TAG\"]" >> "$GITHUB_OUTPUT"
                    else
                      tags=$(git tag | jq -R -s -c 'split("\n")[:-1]')
                      echo "Detected non-release event, building all tags: $tags"
                      echo "tags=$tags" >> "$GITHUB_OUTPUT"

    build-and-publish:
        if: ${{ github.event_name != 'push' && needs.list-tags.outputs.tags != '[]' }}
        runs-on: ubuntu-latest
        needs: list-tags
        permissions:
            contents: read
            packages: write
            id-token: write

        strategy:
            fail-fast: false
            matrix:
                tag: ${{ fromJson(needs.list-tags.outputs.tags) }}

        steps:
            -   name: Checkout code for tag ${{ matrix.tag }}
                uses: actions/checkout@v4
                with:
                    ref: ${{ matrix.tag }}

            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v3

            -   name: Normalize image name to lowercase
                run: echo "IMAGE_NAME_LC=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"

            -   name: Log into registry ${{ env.REGISTRY }}
                uses: docker/login-action@v3
                with:
                    registry: ${{ env.REGISTRY }}
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}

            -   name: Extract Docker metadata
                id: meta
                uses: docker/metadata-action@v5
                with:
                    images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}
                    tags: type=raw,value=${{ matrix.tag }}

            -   name: Build and push Docker image
                id: build-and-push
                uses: docker/build-push-action@v6
                with:
                    context: .
                    push: true
                    tags: ${{ steps.meta.outputs.tags }}
                    labels: ${{ steps.meta.outputs.labels }}
                    cache-from: type=gha
                    cache-to: type=gha,mode=max

            -   name: Install cosign
                uses: sigstore/cosign-installer@v3
                with:
                    cosign-release: 'v2.2.4'

            -   name: Sign the published Docker image
                env:
                    TAGS: ${{ steps.meta.outputs.tags }}
                    DIGEST: ${{ steps.build-and-push.outputs.digest }}
                run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
